#case: https://makerworld.com/en/models/504669

#esphome:
#  name: t4-q368
#  friendly_name: T4 Q368
  includes:
    - text_utils.h

preferences:
  flash_write_interval: 1min 

web_server:
  port: 80
  #version: 1
  ota: true

globals:
  - id: display_celsius
    type: bool
    initial_value: '1'
    restore_value: true
  - id: show_voc
    type: bool
    initial_value: '1'
    restore_value: true
  - id: ontime_hr
    type: int
    restore_value: true
  - id: ontime_min
    type: int
    restore_value: true
  - id: offtime_hr
    type: int
    restore_value: true
  - id: offtime_min
    type: int
    restore_value: true
  - id: use_display_timer
    type: int
    initial_value: '0'
    restore_value: true
  - id: day_mode 
    type: bool
    initial_value: '1'
    restore_value: true
  - id: saved_brightness
    type: float
  - id: saved_display_timer
    type: int

switch:
  - platform: template
    name: "2) Temperature in °F"
    restore_mode: RESTORE_DEFAULT_OFF
    lambda: |-
      if (id(display_celsius)) {
        return false;
      } else {
        return true;
      }
    
    turn_on_action:
      - lambda: id(display_celsius) = 0;
    turn_off_action:
      - lambda: id(display_celsius) = 1;
  - platform: template
    name: "3) Show VOC instead of CO2"
    restore_mode: RESTORE_DEFAULT_OFF
    lambda: |-
      if (id(show_voc)) {
        return true;
      } else {
        return false;
      }
    
    turn_on_action:
      - lambda: id(show_voc) = 1;
    turn_off_action:
      - lambda: id(show_voc) = 0;
  - platform: template
    name: "6) Show 'feels like' instead of actual"
    optimistic: True
    restore_mode: RESTORE_DEFAULT_ON
    id: show_feels_like
    # lambda: |-
    #   if (id(use_display_timer)) {
    #     return true;
    #   } else {
    #     return false;
    #   }
    
    # turn_on_action:
    #   - lambda: id(use_display_timer) = 1;
    # turn_off_action:
    #   - lambda: id(use_display_timer) = 0;

font:
  - file: "gfonts://Roboto"
    id: roboto_unit
    size: 10
  - file: "gfonts://Roboto"
    id: roboto_top
    size: 16
  - file: "gfonts://Roboto"
    id: roboto_mid
    size: 23
  - file: "gfonts://Roboto"
    id: roboto_mid_large
    size: 30
  - file: "gfonts://Roboto"
    id: roboto_large
    size: 45
  - file: "gfonts://Roboto"
    id: roboto_extra_large
    size: 90

image:
  - file: mdi:sun-thermometer
    id: mdi_sun_thermometer
    resize: 30x30
  - file: mdi:thermometer-lines
    id: mdi_thermometer_lines
    resize: 30x30
  - file: mdi:windsock
    id: mdi_windsock
    resize: 30x30
  - file: mdi:weather-sunny
    id: mdi_weather_sunny
    resize: 70x70
  - file: mdi:weather-night
    id: mdi_weather_night
    resize: 70x70
  - file: mdi:weather-cloudy
    id: mdi_weather_cloudy
    resize: 70x70
  - file: mdi:weather-fog
    id: mdi_weather_fog
    resize: 70x70
  - file: mdi:weather-hail
    id: mdi_weather_hail
    resize: 70x70
  - file: mdi:weather-hazy
    id: mdi_weather_hazy
    resize: 70x70
  - file: mdi:weather-lightning-rainy
    id: mdi_weather_lightning_rainy
    resize: 70x70
  - file: mdi:weather-windy
    id: mdi_weather_windy
    resize: 70x70
  - file: mdi:weather-pouring
    id: mdi_weather_pouring
    resize: 70x70
  - file: mdi:weather-snowy
    id: mdi_weather_snowy
    resize: 70x70
  - file: mdi:weather-sunny-off
    id: mdi_weather_sunny_off
    resize: 70x70

color:
  - id: my_red
    red: 100%
    green: 3%
    blue: 5%

# Define a PWM output on the ESP32
output:
  - platform: ledc
    pin: 04
    id: gpio_04_backlight_pwm

# Define a monochromatic, dimmable light for the backlight
light:
  - platform: monochromatic
    output: gpio_04_backlight_pwm
    name: "4) Display Backlight"
    id: back_light
    restore_mode: RESTORE_AND_ON
    on_turn_on:
    - logger.log: "Light Turned On!"
    on_turn_off:
    - logger.log: "Light Turned Off!"
    on_state: 
    - lambda: |-
         //id(saved_brightness) = id(back_light).remote_values.get_brightness();
         ESP_LOGD("main", "current brightness: %.2f", id(back_light).remote_values.get_brightness());
         //id(backlight_level) = id(back_light).remote_values.get_brightness();
         //ESP_LOGD("main", "backlight_level: %.2f current_values: %.2f", id(backlight_level), id(back_light).remote_values.get_brightness());         

binary_sensor:
  - platform: gpio
    pin: 38
    name: "Lower Brightness"
    device_class: light
    on_click:
      min_length: 50ms
      max_length: 350ms 
      then:
        - light.dim_relative:
            id: back_light
            relative_brightness: -10%
            transition_length: 0.5s
        - delay: 0.5s
  - platform: gpio
    pin: 37
    name: "Backlight Toggle"
    device_class: light
    on_release: 
      - lambda: |-
          id(saved_brightness) = id(back_light).remote_values.get_brightness();
          ESP_LOGD("main", "current brightness: %.2f saved brightness: %.2f", id(back_light).remote_values.get_brightness(), id(saved_brightness));
          ESP_LOGD("main", "backlight up: %.2f", id(day_brightness).state);         
          auto call = id(back_light).turn_on();
          call.set_brightness(id(day_brightness).state*0.01);
          call.perform();
    on_press: 
      - lambda: |-
          //id(saved_brightness) = id(back_light).remote_values.get_brightness();
          float target_brightness = id(saved_brightness);//*0.01;
          ESP_LOGD("main", "current brightness: %.2f", id(back_light).remote_values.get_brightness());
          ESP_LOGD("main", "backlight restore: %.2f", target_brightness);  
          auto call = id(back_light).turn_on();
          call.set_brightness(target_brightness);
          call.perform();
    # on_double_click:
    #   min_length: 50ms
    #   max_length: 350ms
    #     - lambda: |-
    #       //ESP_LOGD("main", "doubleclick saved_display_timer restore: %d use_display_timer: %d", id(saved_display_timer), id(use_display_timer));
          
    #       if(id(saved_display_timer) == 0) {
    #         id(saved_display_timer) = id(use_display_timer);
    #       } else {
    #         id(use_display_timer) = id(saved_display_timer);
    #         id(saved_display_timer) = 0;
    #       }
    #   # then:
      #   - light.toggle: back_light
  - platform: gpio
    pin: 39
    id: dim39
    name: "Raise Brightness"
    device_class: light
    on_click:
      min_length: 50ms
      max_length: 350ms
      then:        
        - light.dim_relative:
            id: back_light
            relative_brightness: 10%
            transition_length: 0.5s
        - delay: 0.5s

i2s_audio:
  i2s_lrclk_pin: 33
  i2s_bclk_pin: 26

media_player:
  - platform: i2s_audio
    name: Speaker
    dac_type: external
    i2s_dout_pin: 19
    mode: mono

i2c:
- id: bus_b
  sda: 21
  scl: 22
  scan: true
  frequency: 100000

bme680_bsec:
  i2c_id: bus_b
  address: 0x77
  sample_rate: lp 
  iaq_mode: static
  id: bme680_sensor
  temperature_offset: 3

sensor:
  - platform: bme680_bsec
    temperature:
      name: "Temperature"
      id: temperature   
    pressure:
      name: "Pressure"
      id: pressure
    humidity:
      name: "Humidity"
      id: humidity
    gas_resistance:
      name: "Gas Resistance"
      id: gr
      filters:
        - median
    iaq:
      name: "Indoor Air Quality"
      id: iaq 
    #iaq_accuracy:
      #name: "BME680 IAQ Accuracy Sensor"
    co2_equivalent:
      name: "CO2 Equivalent"
      id: co2
    breath_voc_equivalent:
      name: "Breath VOC Equivalent"
      id: voc

  - platform: copy
    source_id: temperature
    id: temperature_in_f
    filters:
        lambda: return x * (9.0/5.0) + 32.0;
    unit_of_measurement: "°F"
  
  - platform: wifi_signal # Reports the WiFi signal strength/RSSI in dB
    name: "WiFi Signal dB"
    id: wifi_signal_db
    update_interval: 60s
    entity_category: "diagnostic"

  - platform: copy # Reports the WiFi signal strength in %
    source_id: wifi_signal_db
    name: "WiFi Signal Percent"
    filters:
      - lambda: return min(max(2 * (x + 100.0), 0.0), 100.0);
    unit_of_measurement: "%"
    entity_category: "diagnostic"
    device_class: ""   
  
  - platform: uptime
    name: Uptime Sensor
    id: uptime_s
    update_interval: 5s
  
  - platform: homeassistant
    name: "OWP Temperature"
    id: owm_temp
    entity_id: sensor.openweathermap_temperature
      
  - platform: homeassistant
    name: "OWP Temperature Feels Like"
    id: owm_temp_fl
    entity_id: sensor.openweathermap_feels_like_temperature
  
  - platform: homeassistant
    name: "OWP Windspeed"
    id: owm_windspeed
    entity_id: sensor.openweathermap_wind_speed  
    
text_sensor:
  - platform: bme680_bsec
    iaq_accuracy:
      name: "IAQ Accuracy"

  - platform: template
    id: iaqclass
    name: "IAQ Classification"
    icon: "mdi:checkbox-marked-circle-outline"
    lambda: |-
      if ( int(id(iaq).state) <= 50) {
        return {"Excellent"};
      }
      else if (int(id(iaq).state) >= 51 && int(id(iaq).state) <= 100) {
        return {"Good"};
      }
      else if (int(id(iaq).state) >= 101 && int(id(iaq).state) <= 150) {
        return {"Lightly polluted"};
      }
      else if (int(id(iaq).state) >= 151 && int(id(iaq).state) <= 200) {
        return {"Moderately polluted"};
      }
      else if (int(id(iaq).state) >= 201 && int(id(iaq).state) <= 250) {
        return {"Heavily polluted"};
      }
      else if (int(id(iaq).state) >= 251 && int(id(iaq).state) <= 350) {
        return {"Severely polluted"};
      }
      else if (int(id(iaq).state) >= 351) {
        return {"Extremely polluted"};
      }
      else {
        return {"error"};
      }
  
  - platform: template
    name: "Uptime (formatted)"
    id: "uptime_formated"
    lambda: |-
      uint32_t dur = id(uptime_s).state;
      int dys = 0;
      int hrs = 0;
      int mnts = 0;
      if (dur > 86399) {
        dys = trunc(dur / 86400);
        dur = dur - (dys * 86400);
      }
      if (dur > 3599) {
        hrs = trunc(dur / 3600);
        dur = dur - (hrs * 3600);
      }
      if (dur > 59) {
        mnts = trunc(dur / 60);
        dur = dur - (mnts * 60);
      }
      char buffer[17];
      sprintf(buffer, "%ud %02uh %02um %02us", dys, hrs, mnts, dur);
      return {buffer};
    icon: mdi:clock-start
    update_interval: 5s
  
  - platform: homeassistant
    name: "OWP Condition"
    id: owm_owp_condition
    entity_id: sensor.openweathermap_condition
  
  - platform: homeassistant
    name: "OWP Windspeed Unit"
    id: owm_native_windspeed_unit
    entity_id: openweathermap.native_wind_speed_unit

  - platform: homeassistant
    name: "OWP Temp Unit"
    id: owm_native_temperature_unit
    entity_id: openweathermap.native_temperature_unit  
  
  - platform: homeassistant
    name: "OWP Text"
    id: owm_og_txt
    entity_id: weather.openweathermap  

# Example configuration entry - single controller
spi:
  clk_pin: GPIO18
  mosi_pin: GPIO23
  miso_pin: GPIO12

# Example minimal configuration entry
display:
  - platform: ili9xxx
    model: ili9341
    id: display_oled
    dimensions:
      height: 320
      width: 240
      # offset_height: 35
      # offset_width: 0
    dc_pin: 32
    reset_pin: 05
    lambda: |-
      Color txtColor = Color::WHITE;
      Color backColor = Color(strtol(id(background_color).state.c_str(), NULL, 16));
      BaseImage* weatherNow = id(mdi_weather_sunny_off);;

      if(id(day_mode)) {
        txtColor = Color(strtol(id(day_text_color).state.c_str(), NULL, 16));
      } else {
        txtColor = Color(strtol(id(night_text_color).state.c_str(), NULL, 16));
      }
      ESP_LOGD("main", "Text color: %d %d %d", txtColor.red, txtColor.green, txtColor.blue );
      ESP_LOGD("main", "Back color: %d %d %d", backColor.red, backColor.green, backColor.blue );
      ESP_LOGD("main", "condition: %s",  id(owm_temp_fl)->get_unit_of_measurement().c_str());

      if (id(owm_owp_condition).state == "clear-night")
      {
        weatherNow = id(mdi_weather_night);
      } 
      else if (id(owm_owp_condition).state == "cloudy" 
        || id(owm_owp_condition).state == "partlycloudy")
      {  
        weatherNow = id(mdi_weather_cloudy);
      } 
      else if (id(owm_owp_condition).state == "fog")
      {
        weatherNow = id(mdi_weather_fog);
      }
      else if (id(owm_owp_condition).state == "hail")
      {
        weatherNow = id(mdi_weather_hail);
      }
      else if (id(owm_owp_condition).state == "lightning"
        || id(owm_owp_condition).state == "lightning-rainy")
      {
        weatherNow = id(mdi_weather_lightning_rainy);
      }
      else if (id(owm_owp_condition).state == "pouring"
      || id(owm_owp_condition).state == "rainy")
      {
        weatherNow = id(mdi_weather_pouring);
      }
      else if (id(owm_owp_condition).state == "snowy"
        || id(owm_owp_condition).state == "snowy-rainy")
      {
        weatherNow = id(mdi_weather_snowy);
      }
      else if (id(owm_owp_condition).state == "sunny"
        || id(owm_owp_condition).state == "exceptional")
      {
        weatherNow = id(mdi_weather_sunny);
      }
      else if (id(owm_owp_condition).state == "windy"
        || id(owm_owp_condition).state == "windy-variant")
      {
        weatherNow = id(mdi_weather_windy);
      } 

      it.fill(backColor);
      float displayTemp = id(show_feels_like) ? id(owm_temp_fl).state : id(owm_temp).state;
      int iaq_size = GetTextWidth(&it, id(roboto_mid), "%.0f", id(iaq).state);
      int iaq2_size = GetTextWidth(&it, id(roboto_unit), "%s", "IAQ");      
      int ppm_size = GetTextWidth(&it, id(roboto_mid), " %.1f", id(show_voc) ? id(voc).state : id(co2).state);
      int ppm2_size = GetTextWidth(&it, id(roboto_unit), "%s", "ppm");      
      int temp_size = GetTextWidth(&it, id(roboto_mid), "%.1f°", id(display_celsius) ? id(temperature).state : id(temperature_in_f).state);
      int temp2_size = GetTextWidth(&it, id(roboto_unit), "%s", id(display_celsius) ? "C" : "F"); 
      int hum_size = GetTextWidth(&it, id(roboto_mid), " %.1f%", id(humidity).state);
      int hum2_size = GetTextWidth(&it, id(roboto_unit), "%s", "%");    
      int time_height = 125;// GetTextHeight(&it, id(roboto_extra_large), "%H:%M", id(display_timer).now()) + 5;    
      int out_temp_size = GetTextWidth(&it, id(roboto_mid_large), "%.1f°", displayTemp);
      int out_temp2_size = GetTextWidth(&it, id(roboto_unit), "%s", id(display_celsius) ? "C" : "F"); 
      int windspeed_size = GetTextWidth(&it, id(roboto_mid_large), "%.1f", id(owm_temp_fl).state);
      ESP_LOGD("main", "time_height: %d", time_height );

      it.strftime(0, 0, id(roboto_mid), txtColor, "%Y-%m-%d", id(display_timer).now());
      it.strftime(it.get_width()/2, 25, id(roboto_extra_large), txtColor, TextAlign::TOP_CENTER, "%H:%M", id(display_timer).now());
      
      it.image(0, time_height, id(mdi_sun_thermometer), txtColor, backColor);
      it.printf(35, time_height, id(roboto_mid_large), txtColor, "%.1f°", displayTemp);
      it.printf(35+out_temp_size, time_height, id(roboto_unit), txtColor, "%s", id(owm_native_temperature_unit).state.c_str());

      it.image(0, time_height+35, id(mdi_windsock), txtColor, backColor);
      it.printf(35, time_height+35, id(roboto_mid_large), txtColor, "%.1f", id(owm_windspeed).state);
      it.printf(35+windspeed_size, time_height+35, id(roboto_unit), txtColor, "%s", id(owm_native_windspeed_unit).state.c_str());

      it.image(it.get_width(), time_height, weatherNow, ImageAlign::TOP_RIGHT, txtColor, backColor);

      /*
      it.image(it.get_width()-fl_out_temp_size-out_temp2_size, time_height, id(mdi_thermometer_lines), ImageAlign::TOP_RIGHT, txtColor, backColor);
      it.printf(it.get_width()-out_temp2_size, time_height, id(roboto_mid_large), txtColor, TextAlign::TOP_RIGHT, "%.1f°", id(owm_temp_fl).state);
      it.printf(it.get_width(), time_height, id(roboto_unit), txtColor, TextAlign::TOP_RIGHT, "%s", id(display_celsius) ? "C" : "F");
      */

      it.printf(0, 195, id(roboto_top), txtColor, "%s", id(iaqclass).state.c_str());
      it.printf(0, 211, id(roboto_mid), txtColor, "%.0f", id(iaq).state);
      it.print(iaq_size, 211, id(roboto_unit), txtColor, "IAQ");
      it.print(it.get_width(), 211, id(roboto_unit), txtColor, TextAlign::TOP_RIGHT, "ppm");
      it.printf(it.get_width()-ppm2_size, 211, id(roboto_mid), txtColor, TextAlign::TOP_RIGHT, "%.1f", id(show_voc) ? id(voc).state : id(co2).state);
      it.printf(0, 251, id(roboto_mid), txtColor, "%.1f°", id(display_celsius) ? id(temperature).state : id(temperature_in_f).state);
      //it.printf(temp_size, 251, id(roboto_unit), txtColor, "%s", id(display_celsius) ? "C" : "F");
      it.print(it.get_width(), 251, id(roboto_unit), txtColor, TextAlign::TOP_RIGHT, "%");
      it.printf(it.get_width()-hum2_size, 251, id(roboto_mid), txtColor, TextAlign::TOP_RIGHT, " %.1f%", id(humidity).state);   
      it.printf(0, it.get_height()-25, id(roboto_top), txtColor, "Uptime: %s", id(uptime_formated).state.c_str());
      
number:
  - platform: template
    name: "1) Temperature Offset"
    id: "temp_offset"
    mode: slider
    restore_value: true
    step: 0.5
    min_value: -5
    max_value: 5
    optimistic: true
    initial_value: 3
    on_value:
      then:
        lambda: id(bme680_sensor).set_temperature_offset(x);

  - platform: template
    name: "5d) Day Brightness"
    id: "day_brightness"
    mode: slider
    restore_value: true
    step: 5
    min_value: 0
    max_value: 100
    optimistic: true
    initial_value: 70

  - platform: template
    name: "5e) Night Brightness"
    id: "night_brightness"
    mode: slider
    restore_value: true
    step: 5
    min_value: 0
    max_value: 100
    optimistic: true
    initial_value: 20

text:  
  - platform: template
    name: "5f) Day Text Color"
    id: "day_text_color"
    mode: TEXT
    restore_value: true
    optimistic: true
    initial_value: 'FFFFFF'
  
  - platform: template
    name: "5g) Night Text Color"
    id: "night_text_color"
    mode: TEXT
    restore_value: true
    optimistic: true
    initial_value: 'FF0000'
  
  - platform: template
    name: "5h) Background Color"
    id: "background_color"
    mode: TEXT
    restore_value: true
    optimistic: true
    initial_value: '000000'

select:
  - platform: template
    name: "5a) Enable Display Timer"
    restore_value: true
    optimistic: true
    options:      
      - 'Disabled'
      - 'On/Off'
      - 'Day/Night Mode'
    initial_option: 'Disabled'
    on_value:
      then:
        lambda: |-
          ESP_LOGD("main", "Enable Display Timer: %d %s %d", i, x.c_str(), id(use_display_timer));
          id(use_display_timer) = i;
          ESP_LOGD("main", "Enable Display Timer: %d %s %d", i, x.c_str(), id(use_display_timer));
                
  - platform: template
    name: "5b) Display On time"
    restore_value: true
    optimistic: true
    options:      
      - '00:00'
      - '00:15'
      - '00:30'
      - '00:45'
      - '01:00'
      - '01:15'
      - '01:30'
      - '01:45'
      - '02:00'
      - '02:15'
      - '02:30'
      - '02:45'
      - '03:00'
      - '03:15'
      - '03:30'
      - '03:45'
      - '04:00'
      - '04:15'
      - '04:30'
      - '04:45'
      - '05:00'
      - '05:15'
      - '05:30'
      - '05:45'
      - '06:00'
      - '06:15'
      - '06:30'
      - '06:45'
      - '07:00'
      - '07:15'
      - '07:30'
      - '07:45'
      - '08:00'
      - '08:15'
      - '08:30'
      - '08:45'
      - '09:00'
      - '09:15'
      - '09:30'
      - '09:45'
      - '10:00'
      - '10:15'
      - '10:30'
      - '10:45'
      - '11:00'
      - '11:15'
      - '11:30'
      - '11:45'
      - '12:00'
      - '12:15'
      - '12:30'
      - '12:45'
      - '13:00'
      - '13:15'
      - '13:30'
      - '13:45'
      - '14:00'
      - '14:15'
      - '14:30'
      - '14:45'
      - '15:00'
      - '15:15'
      - '15:30'
      - '15:45'
      - '16:00'
      - '16:15'
      - '16:30'
      - '16:45'
      - '17:00'
      - '17:15'
      - '17:30'
      - '17:45'
      - '18:00'
      - '18:15'
      - '18:30'
      - '18:45'
      - '19:00'
      - '19:15'
      - '19:30'
      - '19:45'
      - '20:00'
      - '20:15'
      - '20:30'
      - '20:45'
      - '21:00'
      - '21:15'
      - '21:30'
      - '21:45'
      - '22:00'
      - '22:15'
      - '22:30'
      - '22:45'
      - '23:00'
      - '23:15'
      - '23:30'
      - '23:45'
    initial_option: '07:00'
    on_value:
      then:
        lambda: |-
          id(ontime_hr) = atoi(x.substr(0,2).c_str());
          id(ontime_min) = atoi(x.substr(3,2).c_str());
          ESP_LOGD("main", "On time Hr global value is: %d", id(ontime_hr));
          ESP_LOGD("main", "On time Min global value is: %d", id(ontime_min));
  
  - platform: template
    name: "5c) Display Off time"
    restore_value: true
    optimistic: true
    options:      
      - '00:00'
      - '00:15'
      - '00:30'
      - '00:45'
      - '01:00'
      - '01:15'
      - '01:30'
      - '01:45'
      - '02:00'
      - '02:15'
      - '02:30'
      - '02:45'
      - '03:00'
      - '03:15'
      - '03:30'
      - '03:45'
      - '04:00'
      - '04:15'
      - '04:30'
      - '04:45'
      - '05:00'
      - '05:15'
      - '05:30'
      - '05:45'
      - '06:00'
      - '06:15'
      - '06:30'
      - '06:45'
      - '07:00'
      - '07:15'
      - '07:30'
      - '07:45'
      - '08:00'
      - '08:15'
      - '08:30'
      - '08:45'
      - '09:00'
      - '09:15'
      - '09:30'
      - '09:45'
      - '10:00'
      - '10:15'
      - '10:30'
      - '10:45'
      - '11:00'
      - '11:15'
      - '11:30'
      - '11:45'
      - '12:00'
      - '12:15'
      - '12:30'
      - '12:45'
      - '13:00'
      - '13:15'
      - '13:30'
      - '13:45'
      - '14:00'
      - '14:15'
      - '14:30'
      - '14:45'
      - '15:00'
      - '15:15'
      - '15:30'
      - '15:45'
      - '16:00'
      - '16:15'
      - '16:30'
      - '16:45'
      - '17:00'
      - '17:15'
      - '17:30'
      - '17:45'
      - '18:00'
      - '18:15'
      - '18:30'
      - '18:45'
      - '19:00'
      - '19:15'
      - '19:30'
      - '19:45'
      - '20:00'
      - '20:15'
      - '20:30'
      - '20:45'
      - '21:00'
      - '21:15'
      - '21:30'
      - '21:45'
      - '22:00'
      - '22:15'
      - '22:30'
      - '22:45'
      - '23:00'
      - '23:15'
      - '23:30'
      - '23:45'
    initial_option: '21:30'
    on_value:
      then:
        lambda: |-
          id(offtime_hr) = atoi(x.substr(0,2).c_str());
          id(offtime_min) = atoi(x.substr(3,2).c_str());
          ESP_LOGD("main", "Off time Hr global value is: %d", id(offtime_hr));
          ESP_LOGD("main", "Off time Min global value is: %d", id(offtime_min));

time:
  - platform: sntp
    id: display_timer
    on_time:
      - seconds: 0
        minutes: /1
        # note minutes: /1, not minutes: 1, the latter only does the first minute of each hour rather than every minute
        then:
        - lambda: |-
            ESP_LOGD("main", "Display Timer %d", id(use_display_timer));
            int action = 0;
            auto currenttime = id(display_timer).now();
            ESPTime starttime = currenttime;            
            ESPTime endtime = currenttime;

            starttime.hour = id(ontime_hr);
            starttime.minute = id(ontime_min);
            starttime.recalc_timestamp_utc(false);
            endtime.hour = id(offtime_hr);
            endtime.minute = id(offtime_min);
            endtime.recalc_timestamp_utc(false);

            currenttime.recalc_timestamp_utc(false);

            ESP_LOGD("main", "Time: %d:%d %d %d", currenttime.hour, currenttime.minute, currenttime.timestamp, currenttime.timezone_offset());
            ESP_LOGD("main", "On: %d:%d %d %d", starttime.hour, starttime.minute, starttime.timestamp, starttime.timezone_offset());
            ESP_LOGD("main", "Off %d:%d %d %d", endtime.hour, endtime.minute, endtime.timestamp, endtime.timezone_offset());           
            ESP_LOGD("main", "One: %d Two: %d Three: %d Four: %d", currenttime >= starttime, currenttime < endtime, endtime >= currenttime, currenttime > starttime);
                          
            if (currenttime >= starttime && currenttime < endtime) {
              action = 1;
            } else if(id(back_light).current_values.get_brightness() > 0) {
              action = 2;
            }

            if(id(use_display_timer) == 1) {
              if(action == 1) {
                ESP_LOGD("main", "Turn on display");
                if(!id(back_light).remote_values.is_on()) {
                  //id(back_light).turn_on()
                  auto call = id(back_light).turn_on();
                  // perform action:
                  call.perform();
                }
              } else if(action == 2) {                
                ESP_LOGD("main", "Turn off display");
                if(id(back_light).remote_values.is_on()) {
                  //id(back_light).turn_off();
                  auto call = id(back_light).turn_off();
                  // perform action:
                  call.perform();
                }
              }
            } else if(id(use_display_timer) == 2) {
              if(action == 1) {
                ESP_LOGD("main", "Turn on day mode");
                id(day_mode) = true;
                auto call = id(back_light).turn_on();
                call.set_brightness(id(day_brightness).state*0.01);
                //call.set_rgb(1.0, 1.0, 1.0);
                call.perform();
              } else if(action == 2) {                
                ESP_LOGD("main", "Turn on night mode");
                id(day_mode) = false;
                auto call = id(back_light).turn_on();
                call.set_brightness(id(night_brightness).state*0.01);
                //call.set_rgb(1.0, 1.0, 1.0);
                call.perform();
              }
            };
            
            ESP_LOGD("main", "Day Mode: %d", id(day_mode));