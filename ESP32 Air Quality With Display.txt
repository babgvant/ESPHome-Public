preferences:
  flash_write_interval: 1min    

web_server:
  port: 80
  #version: 1
  ota: false

globals:
  - id: display_celsius
    type: bool
    initial_value: '1'
    restore_value: true
  - id: show_voc
    type: bool
    initial_value: '1'
    restore_value: true
  - id: ontime_hr
    type: int
    restore_value: true
  - id: ontime_min
    type: int
    restore_value: true
  - id: offtime_hr
    type: int
    restore_value: true
  - id: offtime_min
    type: int
    restore_value: true
  - id: use_display_timer
    type: bool
    initial_value: '1'
    restore_value: true

switch:
  - platform: template
    name: "2) Temperature in °F"
    restore_mode: RESTORE_DEFAULT_OFF
    lambda: |-
      if (id(display_celsius)) {
        return false;
      } else {
        return true;
      }
    
    turn_on_action:
      - lambda: id(display_celsius) = 0;
    turn_off_action:
      - lambda: id(display_celsius) = 1;
  - platform: template
    name: "3) Show VOC instead of CO2"
    restore_mode: RESTORE_DEFAULT_OFF
    lambda: |-
      if (id(show_voc)) {
        return true;
      } else {
        return false;
      }
    
    turn_on_action:
      - lambda: id(show_voc) = 1;
    turn_off_action:
      - lambda: id(show_voc) = 0;
  - platform: template
    name: "4) Display On/Off"
    restore_mode: RESTORE_DEFAULT_OFF
    lambda: |-
      if (id(display_oled).is_on()) {
        return true;
      } else {
        return false;
      };
    
    turn_on_action:
      - lambda: id(display_oled).turn_on();
    turn_off_action:
      - lambda: id(display_oled).turn_off();
  - platform: template
    name: "6) Enable Display Timer"
    restore_mode: RESTORE_DEFAULT_OFF
    lambda: |-
      if (id(use_display_timer)) {
        return true;
      } else {
        return false;
      }
    
    turn_on_action:
      - lambda: id(use_display_timer) = 1;
    turn_off_action:
      - lambda: id(use_display_timer) = 0;

font:
  - file: "gfonts://Roboto"
    id: roboto_unit
    size: 10
  - file: "gfonts://Roboto"
    id: roboto_top
    size: 16
  - file: "gfonts://Roboto"
    id: roboto_mid
    size: 23
    
i2c:
- id: bus_a
  sda: 27
  scl: 26
  scan: true
  
- id: bus_b
  sda: 22
  scl: 23
  scan: true
  frequency: 100000

# external_components:
#   - source: github://neffs/esphome@bsec2_bme68x
#     components:
#       - bme68x_bsec

# bme68x_bsec:
#   i2c_id: bus_b
#   address: 0x77
#   id: iq_sensor
#   temperature_offset: 3
#   # Default: static or mobile
#   # iaq_mode: static # currently not working
#   # Default: lp or ulp
#   sample_rate: lp
#   # Default: 6h
#   state_save_interval: 6h
#   # Download from Bosch website: https://www.bosch-sensortec.com/software-tools/software/bme688-software/
#   # File: BSEC 2.x
#   # bsec2-4-0-0_generic_release_23012023.zip\BSEC2.4.0.0_Generic_Release_23012023\config\bme680\bme680_iaq_33v_3s_28d
#   # bsec_configuration: 0,0,2,2,189,1,0,0,0,0,0,0,213,8,0,0,52,0,1,0,0,192,168,71,64,49,119,76,0,0,97,69,0,0,97,69,137,65,0,63,0,0,0,63,0,0,64,63,205,204,204,62,10,0,3,0,216,85,0,100,0,0,96,64,23,183,209,56,28,0,2,0,0,244,1,150,0,50,0,0,128,64,0,0,32,65,144,1,0,0,112,65,0,0,0,63,16,0,3,0,10,215,163,60,10,215,35,59,10,215,35,59,13,0,5,0,0,0,0,0,100,35,41,29,86,88,0,9,0,229,208,34,62,0,0,0,0,0,0,0,0,218,27,156,62,225,11,67,64,0,0,160,64,0,0,0,0,0,0,0,0,94,75,72,189,93,254,159,64,66,62,160,191,0,0,0,0,0,0,0,0,33,31,180,190,138,176,97,64,65,241,99,190,0,0,0,0,0,0,0,0,167,121,71,61,165,189,41,192,184,30,189,64,12,0,10,0,0,0,0,0,0,0,0,0,173,6,11,0,1,2,2,207,61,208,65,149,110,24,66,180,108,177,65,219,148,13,192,70,132,58,66,163,58,140,192,12,99,178,192,185,59,255,193,178,213,175,63,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,110,211,55,195,237,6,56,67,0,0,0,0,0,0,0,0,26,3,255,63,61,246,7,192,171,201,228,192,249,144,215,63,237,199,104,193,128,158,216,64,117,140,155,63,137,120,129,67,108,109,253,191,0,0,0,0,81,64,57,68,103,241,231,64,109,29,152,192,209,43,193,63,93,54,30,65,197,46,92,64,128,27,224,192,6,20,144,191,56,179,130,64,0,0,0,0,43,156,59,196,33,217,100,194,104,77,72,65,15,103,175,191,249,252,12,193,63,117,253,192,233,5,141,65,155,42,25,64,13,88,249,191,0,0,0,0,48,141,122,190,204,150,44,192,36,162,29,193,96,59,39,189,54,202,48,65,151,205,68,64,79,105,55,193,53,120,53,192,77,211,32,192,0,0,0,0,193,207,92,65,239,201,76,65,208,70,82,66,81,63,96,65,48,179,0,194,251,96,242,193,176,51,96,194,153,114,98,66,144,247,64,65,0,0,0,0,219,179,180,63,175,218,119,191,51,71,207,191,245,145,129,63,53,16,244,65,138,208,117,65,138,97,36,66,228,15,32,195,126,91,103,191,0,0,0,0,26,151,170,193,64,105,49,193,46,223,189,193,129,203,168,193,40,91,49,66,4,87,107,65,205,202,37,65,244,36,154,66,240,85,39,193,0,0,0,0,166,96,87,192,114,7,68,191,233,32,214,63,84,249,40,192,45,78,132,64,145,33,253,61,49,43,187,192,244,32,77,67,224,250,71,191,0,0,0,0,103,75,214,190,206,141,252,63,99,15,178,65,80,79,166,190,214,25,146,192,165,29,24,194,18,228,219,193,113,246,235,194,49,115,232,63,0,0,0,0,17,211,124,64,56,252,251,62,25,118,148,193,168,234,94,64,131,157,82,64,217,119,236,65,120,245,240,65,17,69,168,195,49,51,8,63,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,131,217,97,66,182,104,101,194,0,0,0,0,0,0,0,0,6,142,142,195,229,54,143,67,0,0,0,0,0,0,0,0,25,224,153,66,217,51,154,194,0,0,0,0,0,0,0,0,142,36,105,194,199,63,110,66,0,0,0,0,0,0,0,0,206,73,250,193,138,69,249,65,0,0,0,0,0,0,0,0,123,173,127,66,20,116,128,194,0,0,0,0,0,0,0,0,49,65,49,64,205,213,107,192,0,0,0,0,0,0,0,0,189,250,179,194,164,98,180,66,0,0,0,0,0,0,0,0,96,182,197,67,155,71,197,195,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,9,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,185,28,179,73,64,25,141,76,223,26,138,76,222,207,133,76,87,134,164,75,23,127,159,75,166,9,155,75,94,120,170,73,95,221,177,73,93,44,182,73,0,0,0,0,0,0,0,0,0,0,0,0,30,55,120,73,215,98,32,76,7,79,34,76,161,238,36,76,119,151,160,75,119,96,157,75,202,75,154,75,118,89,111,73,133,239,116,73,219,140,120,73,0,0,128,63,0,0,128,63,0,0,128,63,0,0,0,87,1,254,0,2,1,5,48,117,100,0,44,1,112,23,151,7,132,3,197,0,92,4,144,1,64,1,64,1,144,1,48,117,48,117,48,117,48,117,100,0,100,0,100,0,48,117,48,117,48,117,100,0,100,0,48,117,48,117,8,7,8,7,8,7,8,7,8,7,100,0,100,0,100,0,100,0,48,117,48,117,48,117,100,0,100,0,100,0,48,117,48,117,100,0,100,0,255,255,255,255,255,255,255,255,255,255,44,1,44,1,44,1,44,1,44,1,44,1,44,1,44,1,44,1,44,1,44,1,44,1,44,1,44,1,255,255,255,255,255,255,255,255,255,255,8,7,8,7,8,7,8,7,8,7,8,7,8,7,8,7,8,7,8,7,8,7,8,7,8,7,8,7,255,255,255,255,255,255,255,255,255,255,112,23,112,23,112,23,112,23,112,23,112,23,112,23,112,23,112,23,112,23,112,23,112,23,112,23,112,23,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,220,5,220,5,220,5,255,255,255,255,255,255,220,5,220,5,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,48,117,0,5,10,5,0,2,0,10,0,30,0,5,0,5,0,5,0,5,0,5,0,5,0,64,1,100,0,100,0,100,0,200,0,200,0,200,0,64,1,64,1,64,1,10,0,0,0,0,145,33,0,0
#   # state_save_interval: 30min

bme680_bsec:
  i2c_id: bus_b
  address: 0x77
  sample_rate: lp 
  iaq_mode: mobile
  id: iq_sensor
  temperature_offset: 3

sensor:
  - platform: bme680_bsec
    temperature:
      name: "Temperature"
      id: temperature   
    pressure:
      name: "Pressure"
      id: pressure
    humidity:
      name: "Humidity"
      id: humidity
    gas_resistance:
      name: "Gas Resistance"
      id: gr
      filters:
        - median
    iaq:
      name: "Indoor Air Quality"
      id: iaq 
    #iaq_accuracy:
      #name: "BME680 IAQ Accuracy Sensor"
    co2_equivalent:
      name: "CO2 Equivalent"
      id: co2
    breath_voc_equivalent:
      name: "Breath VOC Equivalent"
      id: voc

  - platform: copy
    source_id: temperature
    id: temperature_in_f
    filters:
        lambda: return x * (9.0/5.0) + 32.0;
    unit_of_measurement: "°F"
  
  - platform: wifi_signal # Reports the WiFi signal strength/RSSI in dB
    name: "WiFi Signal dB"
    id: wifi_signal_db
    update_interval: 60s
    entity_category: "diagnostic"

  - platform: copy # Reports the WiFi signal strength in %
    source_id: wifi_signal_db
    name: "WiFi Signal Percent"
    filters:
      - lambda: return min(max(2 * (x + 100.0), 0.0), 100.0);
    unit_of_measurement: "%"
    entity_category: "diagnostic"
    device_class: ""   

  - platform: uptime
    name: Uptime Sensor
    id: uptime_s
    update_interval: 15s

text_sensor:
  - platform: bme680_bsec
    iaq_accuracy:
      name: "IAQ Accuracy"

  - platform: template
    id: iaqclass
    name: "IAQ Classification"
    icon: "mdi:checkbox-marked-circle-outline"
    lambda: |-
      if ( int(id(iaq).state) <= 50) {
        return {"Excellent"};
      }
      else if (int(id(iaq).state) >= 51 && int(id(iaq).state) <= 100) {
        return {"Good"};
      }
      else if (int(id(iaq).state) >= 101 && int(id(iaq).state) <= 150) {
        return {"Lightly polluted"};
      }
      else if (int(id(iaq).state) >= 151 && int(id(iaq).state) <= 200) {
        return {"Moderately polluted"};
      }
      else if (int(id(iaq).state) >= 201 && int(id(iaq).state) <= 250) {
        return {"Heavily polluted"};
      }
      else if (int(id(iaq).state) >= 251 && int(id(iaq).state) <= 350) {
        return {"Severely polluted"};
      }
      else if (int(id(iaq).state) >= 351) {
        return {"Extremely polluted"};
      }
      else {
        return {"error"};
      }

display:
  - platform: ssd1306_i2c
    id: display_oled
    model: "SSD1306 128x64"
    reset_pin: 13
    i2c_id: bus_a
    address: 0x3C
    lambda: |-
      int iaq_size = GetTextWidth(&it, id(roboto_mid), "%.0f", id(iaq).state);
      int iaq2_size = GetTextWidth(&it, id(roboto_unit), "%s", "IAQ");      
      int ppm_size = GetTextWidth(&it, id(roboto_mid), " %.1f", id(show_voc) ? id(voc).state : id(co2).state);
      int ppm2_size = GetTextWidth(&it, id(roboto_unit), "%s", "ppm");      
      int temp_size = GetTextWidth(&it, id(roboto_mid), "%.1f°", id(display_celsius) ? id(temperature).state : id(temperature_in_f).state);
      int temp2_size = GetTextWidth(&it, id(roboto_unit), "%s", id(display_celsius) ? "C" : "F"); 
      int hum_size = GetTextWidth(&it, id(roboto_mid), " %.1f%", id(humidity).state);
      int hum2_size = GetTextWidth(&it, id(roboto_unit), "%s", "%");      
      
      it.printf(0, 0, id(roboto_top), "%s", id(iaqclass).state.c_str());
      it.printf(0, 16, id(roboto_mid), "%.0f", id(iaq).state);
      it.print(iaq_size, 16, id(roboto_unit), "IAQ");
      it.print(it.get_width(), 16, id(roboto_unit), TextAlign::TOP_RIGHT, "ppm");
      it.printf(it.get_width()-ppm2_size, 16, id(roboto_mid), TextAlign::TOP_RIGHT, "%.1f", id(show_voc) ? id(voc).state : id(co2).state);
      it.printf(0, 40, id(roboto_mid), "%.1f°", id(display_celsius) ? id(temperature).state : id(temperature_in_f).state);
      it.printf(temp_size, 40, id(roboto_unit), "%s", id(display_celsius) ? "C" : "F");
      it.print(it.get_width(), 40, id(roboto_unit), TextAlign::TOP_RIGHT, "%");
      it.printf(it.get_width()-hum2_size, 40, id(roboto_mid), TextAlign::TOP_RIGHT, " %.1f%", id(humidity).state);
      
number:
  - platform: template
    name: "5) Display Brightness"
    id: "brightness_display"
    unit_of_measurement: '%'
    mode: slider
    restore_value: true
    step: 1
    min_value: 0
    max_value: 100
    optimistic: true
    initial_value: 100
    on_value:
      then:
        lambda: id(display_oled).set_contrast(x / 100.0);    

  - platform: template
    name: "1) Temperature Offset"
    id: "temp_offset"
    mode: slider
    restore_value: true
    step: 1
    min_value: -5
    max_value: 5
    optimistic: true
    initial_value: 3
    on_value:
      then:
        lambda: id(iq_sensor).set_temperature_offset(x);

select:
  - platform: template
    name: "7) Display On time"
    restore_value: true
    optimistic: true
    options:      
      - '00:00'
      - '00:15'
      - '00:30'
      - '00:45'
      - '01:00'
      - '01:15'
      - '01:30'
      - '01:45'
      - '02:00'
      - '02:15'
      - '02:30'
      - '02:45'
      - '03:00'
      - '03:15'
      - '03:30'
      - '03:45'
      - '04:00'
      - '04:15'
      - '04:30'
      - '04:45'
      - '05:00'
      - '05:15'
      - '05:30'
      - '05:45'
      - '06:00'
      - '06:15'
      - '06:30'
      - '06:45'
      - '07:00'
      - '07:15'
      - '07:30'
      - '07:45'
      - '08:00'
      - '08:15'
      - '08:30'
      - '08:45'
      - '09:00'
      - '09:15'
      - '09:30'
      - '09:45'
      - '10:00'
      - '10:15'
      - '10:30'
      - '10:45'
      - '11:00'
      - '11:15'
      - '11:30'
      - '11:45'
      - '12:00'
      - '12:15'
      - '12:30'
      - '12:45'
      - '13:00'
      - '13:15'
      - '13:30'
      - '13:45'
      - '14:00'
      - '14:15'
      - '14:30'
      - '14:45'
      - '15:00'
      - '15:15'
      - '15:30'
      - '15:45'
      - '16:00'
      - '16:15'
      - '16:30'
      - '16:45'
      - '17:00'
      - '17:15'
      - '17:30'
      - '17:45'
      - '18:00'
      - '18:15'
      - '18:30'
      - '18:45'
      - '19:00'
      - '19:15'
      - '19:30'
      - '19:45'
      - '20:00'
      - '20:15'
      - '20:30'
      - '20:45'
      - '21:00'
      - '21:15'
      - '21:30'
      - '21:45'
      - '22:00'
      - '22:15'
      - '22:30'
      - '22:45'
      - '23:00'
      - '23:15'
      - '23:30'
      - '23:45'
    initial_option: '07:00'
    on_value:
      then:
        lambda: |-
          id(ontime_hr) = atoi(x.substr(0,2).c_str());
          id(ontime_min) = atoi(x.substr(3,2).c_str());
          ESP_LOGD("main", "On time Hr global value is: %d", id(ontime_hr));
          ESP_LOGD("main", "On time Min global value is: %d", id(ontime_min));
  
  - platform: template
    name: "8) Display Off time"
    restore_value: true
    optimistic: true
    options:      
      - '00:00'
      - '00:15'
      - '00:30'
      - '00:45'
      - '01:00'
      - '01:15'
      - '01:30'
      - '01:45'
      - '02:00'
      - '02:15'
      - '02:30'
      - '02:45'
      - '03:00'
      - '03:15'
      - '03:30'
      - '03:45'
      - '04:00'
      - '04:15'
      - '04:30'
      - '04:45'
      - '05:00'
      - '05:15'
      - '05:30'
      - '05:45'
      - '06:00'
      - '06:15'
      - '06:30'
      - '06:45'
      - '07:00'
      - '07:15'
      - '07:30'
      - '07:45'
      - '08:00'
      - '08:15'
      - '08:30'
      - '08:45'
      - '09:00'
      - '09:15'
      - '09:30'
      - '09:45'
      - '10:00'
      - '10:15'
      - '10:30'
      - '10:45'
      - '11:00'
      - '11:15'
      - '11:30'
      - '11:45'
      - '12:00'
      - '12:15'
      - '12:30'
      - '12:45'
      - '13:00'
      - '13:15'
      - '13:30'
      - '13:45'
      - '14:00'
      - '14:15'
      - '14:30'
      - '14:45'
      - '15:00'
      - '15:15'
      - '15:30'
      - '15:45'
      - '16:00'
      - '16:15'
      - '16:30'
      - '16:45'
      - '17:00'
      - '17:15'
      - '17:30'
      - '17:45'
      - '18:00'
      - '18:15'
      - '18:30'
      - '18:45'
      - '19:00'
      - '19:15'
      - '19:30'
      - '19:45'
      - '20:00'
      - '20:15'
      - '20:30'
      - '20:45'
      - '21:00'
      - '21:15'
      - '21:30'
      - '21:45'
      - '22:00'
      - '22:15'
      - '22:30'
      - '22:45'
      - '23:00'
      - '23:15'
      - '23:30'
      - '23:45'
    initial_option: '21:30'
    on_value:
      then:
        lambda: |-
          id(offtime_hr) = atoi(x.substr(0,2).c_str());
          id(offtime_min) = atoi(x.substr(3,2).c_str());
          ESP_LOGD("main", "Off time Hr global value is: %d", id(offtime_hr));
          ESP_LOGD("main", "Off time Min global value is: %d", id(offtime_min));

output:
  - platform: ledc
    pin: GPIO18
    frequency: 10000 Hz
    id: sensor_fan_pwm

fan:
  - platform: speed
    output: sensor_fan_pwm
    name: "9) Fan Speed"
    id: sensor_fan

time:
  - platform: sntp
    id: display_timer
    on_time:
      - seconds: 0
        minutes: /1
        # note minutes: /1, not minutes: 1, the latter only does the first minute of each hour rather than every minute
        then:
        - lambda: |-
            ESP_LOGD("main", "Display Timer %d", id(use_display_timer));
            if(id(use_display_timer) == 1) {
              auto currenttime = id(display_timer).now();
              ESPTime starttime = currenttime;            
              ESPTime endtime = currenttime;

              starttime.hour = id(ontime_hr);
              starttime.minute = id(ontime_min);
              starttime.recalc_timestamp_utc(false);
              endtime.hour = id(offtime_hr);
              endtime.minute = id(offtime_min);
              endtime.recalc_timestamp_utc(false);

              currenttime.recalc_timestamp_utc(false);

              ESP_LOGD("main", "Time: %d:%d %d %d", currenttime.hour, currenttime.minute, currenttime.timestamp, currenttime.timezone_offset());
              ESP_LOGD("main", "On: %d:%d %d %d", starttime.hour, starttime.minute, starttime.timestamp, starttime.timezone_offset());
              ESP_LOGD("main", "Off %d:%d %d %d", endtime.hour, endtime.minute, endtime.timestamp, endtime.timezone_offset());           
              ESP_LOGD("main", "One: %d Two: %d Three: %d Four: %d", currenttime >= starttime, currenttime < endtime, endtime >= currenttime, currenttime > starttime);
                            
              if (currenttime >= starttime && currenttime < endtime) {
                ESP_LOGD("main", "Turn on display");
                if(!id(display_oled).is_on()) {
                  id(display_oled).turn_on();
                }
              } else if(id(display_oled).is_on()) {
                ESP_LOGD("main", "Turn off display");
                id(display_oled).turn_off();
              }
            };
