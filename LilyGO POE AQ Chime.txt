esphome:
  name: poe-chime-1
  friendly_name: POE Chime 1  
  on_boot:
    priority: 800
    then: 
      - delay: 1s
      - fan.turn_on: sensor_fan

esp32:
  board: esp32dev
  framework:
    type: arduino

# Enable logging
logger:

# Enable Home Assistant API
api:
  encryption:
    key: "En4MXGuBQm6xMu3Nui66gSYQUjJ7jgTqz8wK5+ShjwA="

ota:
  password: "0797ec6a58a24548490ee9621c69bf4d"

#wifi:
#  ssid: !secret wifi_ssid
#  password: !secret wifi_password

  # Enable fallback hotspot (captive portal) in case wifi connection fails
#  ap:
#    ssid: "Poe-Chime-1 Fallback Hotspot"
#    password: "o8P7LSVqmyRj"


ethernet:
  type: LAN8720
  mdc_pin: GPIO23
  mdio_pin: GPIO18
  clk_mode: GPIO17_OUT
  phy_addr: 0
  power_pin: GPIO05 

#captive_portal:
    
web_server:
  port: 80
  #version: 1
  ota: true

i2s_audio:
  i2s_lrclk_pin: GPIO02
  i2s_bclk_pin: GPIO04

media_player:
  - platform: i2s_audio
    name: Speaker
    dac_type: external
    i2s_dout_pin: GPIO33
    mode: mono

i2c:
  - id: bus_b
    sda: GPIO15
    scl: GPIO14
    scan: true
    frequency: 100000

bme680_bsec:
  i2c_id: bus_b
  address: 0x77
  sample_rate: lp 
  iaq_mode: mobile
  id: iq_sensor
  temperature_offset: 3

sensor:
  - platform: bme680_bsec
    temperature:
      name: "Temperature"
      id: temperature   
    pressure:
      name: "Pressure"
      id: pressure
    humidity:
      name: "Humidity"
      id: humidity
    gas_resistance:
      name: "Gas Resistance"
      id: gr
      filters:
        - median
    iaq:
      name: "Indoor Air Quality"
      id: iaq 
    #iaq_accuracy:
      #name: "BME680 IAQ Accuracy Sensor"
    co2_equivalent:
      name: "CO2 Equivalent"
      id: co2
    breath_voc_equivalent:
      name: "Breath VOC Equivalent"
      id: voc

  - platform: uptime
    name: Uptime Sensor
    id: uptime_s
    update_interval: 15s

text_sensor:
  - platform: bme680_bsec
    iaq_accuracy:
      name: "IAQ Accuracy"

  - platform: template
    id: iaqclass
    name: "IAQ Classification"
    icon: "mdi:checkbox-marked-circle-outline"
    lambda: |-
      if ( int(id(iaq).state) <= 50) {
        return {"Excellent"};
      }
      else if (int(id(iaq).state) >= 51 && int(id(iaq).state) <= 100) {
        return {"Good"};
      }
      else if (int(id(iaq).state) >= 101 && int(id(iaq).state) <= 150) {
        return {"Lightly polluted"};
      }
      else if (int(id(iaq).state) >= 151 && int(id(iaq).state) <= 200) {
        return {"Moderately polluted"};
      }
      else if (int(id(iaq).state) >= 201 && int(id(iaq).state) <= 250) {
        return {"Heavily polluted"};
      }
      else if (int(id(iaq).state) >= 251 && int(id(iaq).state) <= 350) {
        return {"Severely polluted"};
      }
      else if (int(id(iaq).state) >= 351) {
        return {"Extremely polluted"};
      }
      else {
        return {"error"};
      }

number:
  - platform: template
    name: "Temperature Offset"
    id: "temp_offset"
    mode: slider
    restore_value: true
    step: 1
    min_value: -5
    max_value: 10
    optimistic: true
    initial_value: 3
    on_value:
      then:
        lambda: id(iq_sensor).set_temperature_offset(x);

output:
  - platform: ledc
    pin: GPIO32
    frequency: 10000 Hz
    id: sensor_fan_pwm

fan:
  - platform: speed
    output: sensor_fan_pwm
    name: "Fan Speed"
    id: sensor_fan    